# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_intrules')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_intrules')
    _intrules = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_intrules', [dirname(__file__)])
        except ImportError:
            import _intrules
            return _intrules
        try:
            _mod = imp.load_module('_intrules', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _intrules = swig_import_helper()
    del swig_import_helper
else:
    import _intrules
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import array
import ostream_typemap
class IntegrationPointArray(array.BaseArray):
    __swig_setmethods__ = {}
    for _s in [array.BaseArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationPointArray, name, value)
    __swig_getmethods__ = {}
    for _s in [array.BaseArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationPointArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _intrules.new_IntegrationPointArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) == 1 and isinstance(args[0], list):
            self.MakeDataOwner()



    __swig_destroy__ = _intrules.delete_IntegrationPointArray
    __del__ = lambda self: None

    def GetData(self, *args):
        return _intrules.IntegrationPointArray_GetData(self, *args)

    def OwnsData(self):
        return _intrules.IntegrationPointArray_OwnsData(self)

    def StealData(self, p):
        return _intrules.IntegrationPointArray_StealData(self, p)

    def LoseData(self):
        return _intrules.IntegrationPointArray_LoseData(self)

    def MakeDataOwner(self):
        return _intrules.IntegrationPointArray_MakeDataOwner(self)

    def Size(self):
        return _intrules.IntegrationPointArray_Size(self)

    def SetSize(self, *args):
        return _intrules.IntegrationPointArray_SetSize(self, *args)

    def Capacity(self):
        return _intrules.IntegrationPointArray_Capacity(self)

    def Reserve(self, capacity):
        return _intrules.IntegrationPointArray_Reserve(self, capacity)

    def Append(self, *args):
        return _intrules.IntegrationPointArray_Append(self, *args)

    def Prepend(self, el):
        return _intrules.IntegrationPointArray_Prepend(self, el)

    def Last(self, *args):
        return _intrules.IntegrationPointArray_Last(self, *args)

    def DeleteLast(self):
        return _intrules.IntegrationPointArray_DeleteLast(self)

    def DeleteAll(self):
        return _intrules.IntegrationPointArray_DeleteAll(self)

    def Copy(self, copy):
        return _intrules.IntegrationPointArray_Copy(self, copy)

    def MakeRef(self, *args):
        return _intrules.IntegrationPointArray_MakeRef(self, *args)

    def GetSubArray(self, offset, sa_size, sa):
        return _intrules.IntegrationPointArray_GetSubArray(self, offset, sa_size, sa)

    def begin(self):
        return _intrules.IntegrationPointArray_begin(self)

    def end(self):
        return _intrules.IntegrationPointArray_end(self)

    def MemoryUsage(self):
        return _intrules.IntegrationPointArray_MemoryUsage(self)

    def __setitem__(self, i, v):
        return _intrules.IntegrationPointArray___setitem__(self, i, v)

    def __getitem__(self, i):
        return _intrules.IntegrationPointArray___getitem__(self, i)

    def Assign(self, *args):
        return _intrules.IntegrationPointArray_Assign(self, *args)

    def ToList(self):
        return [self[i] for i in range(self.Size())]


IntegrationPointArray_swigregister = _intrules.IntegrationPointArray_swigregister
IntegrationPointArray_swigregister(IntegrationPointArray)

class IntegrationPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _intrules.IntegrationPoint_x_set
    __swig_getmethods__["x"] = _intrules.IntegrationPoint_x_get
    if _newclass:
        x = _swig_property(_intrules.IntegrationPoint_x_get, _intrules.IntegrationPoint_x_set)
    __swig_setmethods__["y"] = _intrules.IntegrationPoint_y_set
    __swig_getmethods__["y"] = _intrules.IntegrationPoint_y_get
    if _newclass:
        y = _swig_property(_intrules.IntegrationPoint_y_get, _intrules.IntegrationPoint_y_set)
    __swig_setmethods__["z"] = _intrules.IntegrationPoint_z_set
    __swig_getmethods__["z"] = _intrules.IntegrationPoint_z_get
    if _newclass:
        z = _swig_property(_intrules.IntegrationPoint_z_get, _intrules.IntegrationPoint_z_set)
    __swig_setmethods__["weight"] = _intrules.IntegrationPoint_weight_set
    __swig_getmethods__["weight"] = _intrules.IntegrationPoint_weight_get
    if _newclass:
        weight = _swig_property(_intrules.IntegrationPoint_weight_get, _intrules.IntegrationPoint_weight_set)

    def Init(self):
        return _intrules.IntegrationPoint_Init(self)

    def Get(self, p, dim):
        return _intrules.IntegrationPoint_Get(self, p, dim)

    def Set(self, *args):
        return _intrules.IntegrationPoint_Set(self, *args)

    def Set3w(self, p):
        return _intrules.IntegrationPoint_Set3w(self, p)

    def Set3(self, *args):
        return _intrules.IntegrationPoint_Set3(self, *args)

    def Set2w(self, *args):
        return _intrules.IntegrationPoint_Set2w(self, *args)

    def Set2(self, *args):
        return _intrules.IntegrationPoint_Set2(self, *args)

    def Set1w(self, *args):
        return _intrules.IntegrationPoint_Set1w(self, *args)

    def __init__(self):
        this = _intrules.new_IntegrationPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intrules.delete_IntegrationPoint
    __del__ = lambda self: None
IntegrationPoint_swigregister = _intrules.IntegrationPoint_swigregister
IntegrationPoint_swigregister(IntegrationPoint)

class IntegrationRule(IntegrationPointArray):
    __swig_setmethods__ = {}
    for _s in [IntegrationPointArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationRule, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegrationPointArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationRule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _intrules.new_IntegrationRule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetNPoints(self):
        return _intrules.IntegrationRule_GetNPoints(self)

    def IntPoint(self, *args):
        return _intrules.IntegrationRule_IntPoint(self, *args)
    __swig_destroy__ = _intrules.delete_IntegrationRule
    __del__ = lambda self: None
IntegrationRule_swigregister = _intrules.IntegrationRule_swigregister
IntegrationRule_swigregister(IntegrationRule)

class QuadratureFunctions1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadratureFunctions1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadratureFunctions1D, name)
    __repr__ = _swig_repr

    def GaussLegendre(self, np, ir):
        return _intrules.QuadratureFunctions1D_GaussLegendre(self, np, ir)

    def GaussLobatto(self, np, ir):
        return _intrules.QuadratureFunctions1D_GaussLobatto(self, np, ir)

    def OpenUniform(self, np, ir):
        return _intrules.QuadratureFunctions1D_OpenUniform(self, np, ir)

    def ClosedUniform(self, np, ir):
        return _intrules.QuadratureFunctions1D_ClosedUniform(self, np, ir)

    def OpenHalfUniform(self, np, ir):
        return _intrules.QuadratureFunctions1D_OpenHalfUniform(self, np, ir)

    def GivePolyPoints(self, np, pts, type):
        return _intrules.QuadratureFunctions1D_GivePolyPoints(self, np, pts, type)

    def __init__(self):
        this = _intrules.new_QuadratureFunctions1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intrules.delete_QuadratureFunctions1D
    __del__ = lambda self: None
QuadratureFunctions1D_swigregister = _intrules.QuadratureFunctions1D_swigregister
QuadratureFunctions1D_swigregister(QuadratureFunctions1D)

class Quadrature1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quadrature1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quadrature1D, name)
    __repr__ = _swig_repr
    Invalid = _intrules.Quadrature1D_Invalid
    GaussLegendre = _intrules.Quadrature1D_GaussLegendre
    GaussLobatto = _intrules.Quadrature1D_GaussLobatto
    OpenUniform = _intrules.Quadrature1D_OpenUniform
    ClosedUniform = _intrules.Quadrature1D_ClosedUniform
    OpenHalfUniform = _intrules.Quadrature1D_OpenHalfUniform
    if _newclass:
        CheckClosed = staticmethod(_intrules.Quadrature1D_CheckClosed)
    else:
        CheckClosed = _intrules.Quadrature1D_CheckClosed
    if _newclass:
        CheckOpen = staticmethod(_intrules.Quadrature1D_CheckOpen)
    else:
        CheckOpen = _intrules.Quadrature1D_CheckOpen

    def __init__(self):
        this = _intrules.new_Quadrature1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _intrules.delete_Quadrature1D
    __del__ = lambda self: None
Quadrature1D_swigregister = _intrules.Quadrature1D_swigregister
Quadrature1D_swigregister(Quadrature1D)

def Quadrature1D_CheckClosed(type):
    return _intrules.Quadrature1D_CheckClosed(type)
Quadrature1D_CheckClosed = _intrules.Quadrature1D_CheckClosed

def Quadrature1D_CheckOpen(type):
    return _intrules.Quadrature1D_CheckOpen(type)
Quadrature1D_CheckOpen = _intrules.Quadrature1D_CheckOpen

class IntegrationRules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationRules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _intrules.new_IntegrationRules(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Get(self, GeomType, Order):
        return _intrules.IntegrationRules_Get(self, GeomType, Order)

    def Set(self, GeomType, Order, IntRule):
        return _intrules.IntegrationRules_Set(self, GeomType, Order, IntRule)

    def SetOwnRules(self, o):
        return _intrules.IntegrationRules_SetOwnRules(self, o)
    __swig_destroy__ = _intrules.delete_IntegrationRules
    __del__ = lambda self: None
IntegrationRules_swigregister = _intrules.IntegrationRules_swigregister
IntegrationRules_swigregister(IntegrationRules)

# This file is compatible with both classic and new-style classes.

cvar = _intrules.cvar
IntRules = cvar.IntRules
RefinedIntRules = cvar.RefinedIntRules

