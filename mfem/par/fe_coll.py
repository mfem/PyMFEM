# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fe_coll')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fe_coll')
    _fe_coll = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fe_coll', [dirname(__file__)])
        except ImportError:
            import _fe_coll
            return _fe_coll
        try:
            _mod = imp.load_module('_fe_coll', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fe_coll = swig_import_helper()
    del swig_import_helper
else:
    import _fe_coll
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mesh
import matrix
import vector
import array
import ostream_typemap
import operators
import ncmesh
import element
import densemat
import geom
import intrules
import table
import vertex
import gridfunc
import coefficient
import sparsemat
import eltrans
import fe
import fespace
import lininteg
import bilininteg
import linearform
class BasisType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasisType, name)
    __repr__ = _swig_repr
    GaussLegendre = _fe_coll.BasisType_GaussLegendre
    GaussLobatto = _fe_coll.BasisType_GaussLobatto
    Positive = _fe_coll.BasisType_Positive
    OpenUniform = _fe_coll.BasisType_OpenUniform
    ClosedUniform = _fe_coll.BasisType_ClosedUniform
    OpenHalfUniform = _fe_coll.BasisType_OpenHalfUniform
    if _newclass:
        Check = staticmethod(_fe_coll.BasisType_Check)
    else:
        Check = _fe_coll.BasisType_Check
    if _newclass:
        GetQuadrature1D = staticmethod(_fe_coll.BasisType_GetQuadrature1D)
    else:
        GetQuadrature1D = _fe_coll.BasisType_GetQuadrature1D
    if _newclass:
        Name = staticmethod(_fe_coll.BasisType_Name)
    else:
        Name = _fe_coll.BasisType_Name
    if _newclass:
        GetChar = staticmethod(_fe_coll.BasisType_GetChar)
    else:
        GetChar = _fe_coll.BasisType_GetChar
    if _newclass:
        GetType = staticmethod(_fe_coll.BasisType_GetType)
    else:
        GetType = _fe_coll.BasisType_GetType

    def __init__(self):
        this = _fe_coll.new_BasisType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_BasisType
    __del__ = lambda self: None
BasisType_swigregister = _fe_coll.BasisType_swigregister
BasisType_swigregister(BasisType)

def BasisType_Check(b_type):
    return _fe_coll.BasisType_Check(b_type)
BasisType_Check = _fe_coll.BasisType_Check

def BasisType_GetQuadrature1D(b_type):
    return _fe_coll.BasisType_GetQuadrature1D(b_type)
BasisType_GetQuadrature1D = _fe_coll.BasisType_GetQuadrature1D

def BasisType_Name(b_type):
    return _fe_coll.BasisType_Name(b_type)
BasisType_Name = _fe_coll.BasisType_Name

def BasisType_GetChar(b_type):
    return _fe_coll.BasisType_GetChar(b_type)
BasisType_GetChar = _fe_coll.BasisType_GetChar

def BasisType_GetType(b_ident):
    return _fe_coll.BasisType_GetType(b_ident)
BasisType_GetType = _fe_coll.BasisType_GetType

class FiniteElementCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteElementCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteElementCollection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.FiniteElementCollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.FiniteElementCollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.FiniteElementCollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.FiniteElementCollection_Name(self)

    def HasFaceDofs(self, GeomType):
        return _fe_coll.FiniteElementCollection_HasFaceDofs(self, GeomType)

    def TraceFiniteElementForGeometry(self, GeomType):
        return _fe_coll.FiniteElementCollection_TraceFiniteElementForGeometry(self, GeomType)

    def GetTraceCollection(self):
        return _fe_coll.FiniteElementCollection_GetTraceCollection(self)
    __swig_destroy__ = _fe_coll.delete_FiniteElementCollection
    __del__ = lambda self: None
    if _newclass:
        New = staticmethod(_fe_coll.FiniteElementCollection_New)
    else:
        New = _fe_coll.FiniteElementCollection_New

    def SubDofOrder(self, Geom, SDim, Info, dofs):
        return _fe_coll.FiniteElementCollection_SubDofOrder(self, Geom, SDim, Info, dofs)
FiniteElementCollection_swigregister = _fe_coll.FiniteElementCollection_swigregister
FiniteElementCollection_swigregister(FiniteElementCollection)

def FiniteElementCollection_New(name):
    return _fe_coll.FiniteElementCollection_New(name)
FiniteElementCollection_New = _fe_coll.FiniteElementCollection_New

class H1_FECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_H1_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.H1_FECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.H1_FECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.H1_FECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.H1_FECollection_Name(self)

    def GetTraceCollection(self):
        return _fe_coll.H1_FECollection_GetTraceCollection(self)

    def GetBasisType(self):
        return _fe_coll.H1_FECollection_GetBasisType(self)

    def GetDofMap(self, GeomType):
        return _fe_coll.H1_FECollection_GetDofMap(self, GeomType)
    __swig_destroy__ = _fe_coll.delete_H1_FECollection
    __del__ = lambda self: None
H1_FECollection_swigregister = _fe_coll.H1_FECollection_swigregister
H1_FECollection_swigregister(H1_FECollection)

class H1Pos_FECollection(H1_FECollection):
    __swig_setmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, p, dim=3):
        this = _fe_coll.new_H1Pos_FECollection(p, dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_H1Pos_FECollection
    __del__ = lambda self: None
H1Pos_FECollection_swigregister = _fe_coll.H1Pos_FECollection_swigregister
H1Pos_FECollection_swigregister(H1Pos_FECollection)

class H1_Trace_FECollection(H1_FECollection):
    __swig_setmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_H1_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_H1_Trace_FECollection
    __del__ = lambda self: None
H1_Trace_FECollection_swigregister = _fe_coll.H1_Trace_FECollection_swigregister
H1_Trace_FECollection_swigregister(H1_Trace_FECollection)

class L2_FECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_L2_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.L2_FECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.L2_FECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.L2_FECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.L2_FECollection_Name(self)

    def TraceFiniteElementForGeometry(self, GeomType):
        return _fe_coll.L2_FECollection_TraceFiniteElementForGeometry(self, GeomType)

    def GetBasisType(self):
        return _fe_coll.L2_FECollection_GetBasisType(self)
    __swig_destroy__ = _fe_coll.delete_L2_FECollection
    __del__ = lambda self: None
L2_FECollection_swigregister = _fe_coll.L2_FECollection_swigregister
L2_FECollection_swigregister(L2_FECollection)

class RT_FECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_RT_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT_FECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT_FECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT_FECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT_FECollection_Name(self)

    def GetTraceCollection(self):
        return _fe_coll.RT_FECollection_GetTraceCollection(self)
    __swig_destroy__ = _fe_coll.delete_RT_FECollection
    __del__ = lambda self: None
RT_FECollection_swigregister = _fe_coll.RT_FECollection_swigregister
RT_FECollection_swigregister(RT_FECollection)

class RT_Trace_FECollection(RT_FECollection):
    __swig_setmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_RT_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_RT_Trace_FECollection
    __del__ = lambda self: None
RT_Trace_FECollection_swigregister = _fe_coll.RT_Trace_FECollection_swigregister
RT_Trace_FECollection_swigregister(RT_Trace_FECollection)

class DG_Interface_FECollection(RT_FECollection):
    __swig_setmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DG_Interface_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DG_Interface_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_DG_Interface_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_DG_Interface_FECollection
    __del__ = lambda self: None
DG_Interface_FECollection_swigregister = _fe_coll.DG_Interface_FECollection_swigregister
DG_Interface_FECollection_swigregister(DG_Interface_FECollection)

class ND_FECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_ND_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.ND_FECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.ND_FECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.ND_FECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.ND_FECollection_Name(self)

    def GetTraceCollection(self):
        return _fe_coll.ND_FECollection_GetTraceCollection(self)
    __swig_destroy__ = _fe_coll.delete_ND_FECollection
    __del__ = lambda self: None
ND_FECollection_swigregister = _fe_coll.ND_FECollection_swigregister
ND_FECollection_swigregister(ND_FECollection)

class ND_Trace_FECollection(ND_FECollection):
    __swig_setmethods__ = {}
    for _s in [ND_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [ND_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe_coll.new_ND_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_ND_Trace_FECollection
    __del__ = lambda self: None
ND_Trace_FECollection_swigregister = _fe_coll.ND_Trace_FECollection_swigregister
ND_Trace_FECollection_swigregister(ND_Trace_FECollection)

class NURBSFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBSFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBSFECollection, name)
    __repr__ = _swig_repr

    def __init__(self, Order):
        this = _fe_coll.new_NURBSFECollection(Order)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOrder(self):
        return _fe_coll.NURBSFECollection_GetOrder(self)

    def UpdateOrder(self, Order):
        return _fe_coll.NURBSFECollection_UpdateOrder(self, Order)

    def Reset(self):
        return _fe_coll.NURBSFECollection_Reset(self)

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.NURBSFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.NURBSFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.NURBSFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.NURBSFECollection_Name(self)

    def GetTraceCollection(self):
        return _fe_coll.NURBSFECollection_GetTraceCollection(self)
    __swig_destroy__ = _fe_coll.delete_NURBSFECollection
    __del__ = lambda self: None
NURBSFECollection_swigregister = _fe_coll.NURBSFECollection_swigregister
NURBSFECollection_swigregister(NURBSFECollection)

class LinearFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_LinearFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.LinearFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.LinearFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.LinearFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.LinearFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_LinearFECollection
    __del__ = lambda self: None
LinearFECollection_swigregister = _fe_coll.LinearFECollection_swigregister
LinearFECollection_swigregister(LinearFECollection)

class QuadraticFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_QuadraticFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.QuadraticFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.QuadraticFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.QuadraticFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.QuadraticFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_QuadraticFECollection
    __del__ = lambda self: None
QuadraticFECollection_swigregister = _fe_coll.QuadraticFECollection_swigregister
QuadraticFECollection_swigregister(QuadraticFECollection)

class QuadraticPosFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticPosFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticPosFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_QuadraticPosFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.QuadraticPosFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.QuadraticPosFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.QuadraticPosFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.QuadraticPosFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_QuadraticPosFECollection
    __del__ = lambda self: None
QuadraticPosFECollection_swigregister = _fe_coll.QuadraticPosFECollection_swigregister
QuadraticPosFECollection_swigregister(QuadraticPosFECollection)

class CubicFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_CubicFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.CubicFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.CubicFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.CubicFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.CubicFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_CubicFECollection
    __del__ = lambda self: None
CubicFECollection_swigregister = _fe_coll.CubicFECollection_swigregister
CubicFECollection_swigregister(CubicFECollection)

class CrouzeixRaviartFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_CrouzeixRaviartFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.CrouzeixRaviartFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.CrouzeixRaviartFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.CrouzeixRaviartFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.CrouzeixRaviartFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_CrouzeixRaviartFECollection
    __del__ = lambda self: None
CrouzeixRaviartFECollection_swigregister = _fe_coll.CrouzeixRaviartFECollection_swigregister
CrouzeixRaviartFECollection_swigregister(CrouzeixRaviartFECollection)

class LinearNonConf3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearNonConf3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearNonConf3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_LinearNonConf3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.LinearNonConf3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.LinearNonConf3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.LinearNonConf3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.LinearNonConf3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_LinearNonConf3DFECollection
    __del__ = lambda self: None
LinearNonConf3DFECollection_swigregister = _fe_coll.LinearNonConf3DFECollection_swigregister
LinearNonConf3DFECollection_swigregister(LinearNonConf3DFECollection)

class RT0_2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RT0_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT0_2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT0_2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT0_2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT0_2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RT0_2DFECollection
    __del__ = lambda self: None
RT0_2DFECollection_swigregister = _fe_coll.RT0_2DFECollection_swigregister
RT0_2DFECollection_swigregister(RT0_2DFECollection)

class RT1_2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RT1_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT1_2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT1_2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT1_2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT1_2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RT1_2DFECollection
    __del__ = lambda self: None
RT1_2DFECollection_swigregister = _fe_coll.RT1_2DFECollection_swigregister
RT1_2DFECollection_swigregister(RT1_2DFECollection)

class RT2_2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RT2_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT2_2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT2_2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT2_2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT2_2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RT2_2DFECollection
    __del__ = lambda self: None
RT2_2DFECollection_swigregister = _fe_coll.RT2_2DFECollection_swigregister
RT2_2DFECollection_swigregister(RT2_2DFECollection)

class Const2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Const2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Const2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_Const2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.Const2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.Const2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.Const2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.Const2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_Const2DFECollection
    __del__ = lambda self: None
Const2DFECollection_swigregister = _fe_coll.Const2DFECollection_swigregister
Const2DFECollection_swigregister(Const2DFECollection)

class LinearDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_LinearDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.LinearDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.LinearDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.LinearDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.LinearDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_LinearDiscont2DFECollection
    __del__ = lambda self: None
LinearDiscont2DFECollection_swigregister = _fe_coll.LinearDiscont2DFECollection_swigregister
LinearDiscont2DFECollection_swigregister(LinearDiscont2DFECollection)

class GaussLinearDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLinearDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLinearDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_GaussLinearDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.GaussLinearDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.GaussLinearDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.GaussLinearDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.GaussLinearDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_GaussLinearDiscont2DFECollection
    __del__ = lambda self: None
GaussLinearDiscont2DFECollection_swigregister = _fe_coll.GaussLinearDiscont2DFECollection_swigregister
GaussLinearDiscont2DFECollection_swigregister(GaussLinearDiscont2DFECollection)

class P1OnQuadFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1OnQuadFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1OnQuadFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_P1OnQuadFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.P1OnQuadFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.P1OnQuadFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.P1OnQuadFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.P1OnQuadFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_P1OnQuadFECollection
    __del__ = lambda self: None
P1OnQuadFECollection_swigregister = _fe_coll.P1OnQuadFECollection_swigregister
P1OnQuadFECollection_swigregister(P1OnQuadFECollection)

class QuadraticDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_QuadraticDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.QuadraticDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.QuadraticDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.QuadraticDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.QuadraticDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_QuadraticDiscont2DFECollection
    __del__ = lambda self: None
QuadraticDiscont2DFECollection_swigregister = _fe_coll.QuadraticDiscont2DFECollection_swigregister
QuadraticDiscont2DFECollection_swigregister(QuadraticDiscont2DFECollection)

class QuadraticPosDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticPosDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticPosDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_QuadraticPosDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.QuadraticPosDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.QuadraticPosDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.QuadraticPosDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.QuadraticPosDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_QuadraticPosDiscont2DFECollection
    __del__ = lambda self: None
QuadraticPosDiscont2DFECollection_swigregister = _fe_coll.QuadraticPosDiscont2DFECollection_swigregister
QuadraticPosDiscont2DFECollection_swigregister(QuadraticPosDiscont2DFECollection)

class GaussQuadraticDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussQuadraticDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussQuadraticDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_GaussQuadraticDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.GaussQuadraticDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.GaussQuadraticDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.GaussQuadraticDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_GaussQuadraticDiscont2DFECollection
    __del__ = lambda self: None
GaussQuadraticDiscont2DFECollection_swigregister = _fe_coll.GaussQuadraticDiscont2DFECollection_swigregister
GaussQuadraticDiscont2DFECollection_swigregister(GaussQuadraticDiscont2DFECollection)

class CubicDiscont2DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_CubicDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.CubicDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.CubicDiscont2DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.CubicDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.CubicDiscont2DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_CubicDiscont2DFECollection
    __del__ = lambda self: None
CubicDiscont2DFECollection_swigregister = _fe_coll.CubicDiscont2DFECollection_swigregister
CubicDiscont2DFECollection_swigregister(CubicDiscont2DFECollection)

class Const3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Const3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Const3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_Const3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.Const3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.Const3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.Const3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.Const3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_Const3DFECollection
    __del__ = lambda self: None
Const3DFECollection_swigregister = _fe_coll.Const3DFECollection_swigregister
Const3DFECollection_swigregister(Const3DFECollection)

class LinearDiscont3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearDiscont3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearDiscont3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_LinearDiscont3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.LinearDiscont3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.LinearDiscont3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.LinearDiscont3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.LinearDiscont3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_LinearDiscont3DFECollection
    __del__ = lambda self: None
LinearDiscont3DFECollection_swigregister = _fe_coll.LinearDiscont3DFECollection_swigregister
LinearDiscont3DFECollection_swigregister(LinearDiscont3DFECollection)

class QuadraticDiscont3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticDiscont3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticDiscont3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_QuadraticDiscont3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.QuadraticDiscont3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.QuadraticDiscont3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.QuadraticDiscont3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.QuadraticDiscont3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_QuadraticDiscont3DFECollection
    __del__ = lambda self: None
QuadraticDiscont3DFECollection_swigregister = _fe_coll.QuadraticDiscont3DFECollection_swigregister
QuadraticDiscont3DFECollection_swigregister(QuadraticDiscont3DFECollection)

class RefinedLinearFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinearFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinearFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RefinedLinearFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RefinedLinearFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RefinedLinearFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RefinedLinearFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RefinedLinearFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RefinedLinearFECollection
    __del__ = lambda self: None
RefinedLinearFECollection_swigregister = _fe_coll.RefinedLinearFECollection_swigregister
RefinedLinearFECollection_swigregister(RefinedLinearFECollection)

class ND1_3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND1_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND1_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_ND1_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.ND1_3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.ND1_3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.ND1_3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.ND1_3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_ND1_3DFECollection
    __del__ = lambda self: None
ND1_3DFECollection_swigregister = _fe_coll.ND1_3DFECollection_swigregister
ND1_3DFECollection_swigregister(ND1_3DFECollection)

class RT0_3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RT0_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT0_3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT0_3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT0_3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT0_3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RT0_3DFECollection
    __del__ = lambda self: None
RT0_3DFECollection_swigregister = _fe_coll.RT0_3DFECollection_swigregister
RT0_3DFECollection_swigregister(RT0_3DFECollection)

class RT1_3DFECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe_coll.new_RT1_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        return _fe_coll.RT1_3DFECollection_FiniteElementForGeometry(self, GeomType)

    def DofForGeometry(self, GeomType):
        return _fe_coll.RT1_3DFECollection_DofForGeometry(self, GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.RT1_3DFECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.RT1_3DFECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_RT1_3DFECollection
    __del__ = lambda self: None
RT1_3DFECollection_swigregister = _fe_coll.RT1_3DFECollection_swigregister
RT1_3DFECollection_swigregister(RT1_3DFECollection)

class Local_FECollection(FiniteElementCollection):
    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Local_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Local_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, fe_name):
        this = _fe_coll.new_Local_FECollection(fe_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, _GeomType):
        return _fe_coll.Local_FECollection_FiniteElementForGeometry(self, _GeomType)

    def DofForGeometry(self, _GeomType):
        return _fe_coll.Local_FECollection_DofForGeometry(self, _GeomType)

    def DofOrderForOrientation(self, GeomType, Or):
        return _fe_coll.Local_FECollection_DofOrderForOrientation(self, GeomType, Or)

    def Name(self):
        return _fe_coll.Local_FECollection_Name(self)
    __swig_destroy__ = _fe_coll.delete_Local_FECollection
    __del__ = lambda self: None
Local_FECollection_swigregister = _fe_coll.Local_FECollection_swigregister
Local_FECollection_swigregister(Local_FECollection)


DG_FECollection = L2_FECollection

# This file is compatible with both classic and new-style classes.


