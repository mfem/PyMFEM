# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nonlinearform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nonlinearform')
    _nonlinearform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nonlinearform', [dirname(__file__)])
        except ImportError:
            import _nonlinearform
            return _nonlinearform
        try:
            _mod = imp.load_module('_nonlinearform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nonlinearform = swig_import_helper()
    del swig_import_helper
else:
    import _nonlinearform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import operators
import vector
import array
import ostream_typemap
import fespace
import coefficient
import matrix
import intrules
import sparsemat
import densemat
import eltrans
import fe
import mesh
import ncmesh
import element
import geom
import table
import vertex
import gridfunc
import bilininteg
import fe_coll
import lininteg
import linearform
import nonlininteg
class NonlinearForm(operators.Operator):
    __swig_setmethods__ = {}
    for _s in [operators.Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonlinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [operators.Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonlinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _nonlinearform.new_NonlinearForm(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FESpace(self, *args):
        return _nonlinearform.NonlinearForm_FESpace(self, *args)

    def AddDomainIntegrator(self, nlfi):

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi.thisown=0 


        return _nonlinearform.NonlinearForm_AddDomainIntegrator(self, nlfi)


    def AddInteriorFaceIntegrator(self, nlfi):
        return _nonlinearform.NonlinearForm_AddInteriorFaceIntegrator(self, nlfi)

    def AddBdrFaceIntegrator(self, *args):
        return _nonlinearform.NonlinearForm_AddBdrFaceIntegrator(self, *args)

    def SetEssentialBC(self, bdr_attr_is_ess, rhs=None):
        return _nonlinearform.NonlinearForm_SetEssentialBC(self, bdr_attr_is_ess, rhs)

    def SetEssentialVDofs(self, ess_vdofs_list):
        return _nonlinearform.NonlinearForm_SetEssentialVDofs(self, ess_vdofs_list)

    def GetEnergy(self, x):
        return _nonlinearform.NonlinearForm_GetEnergy(self, x)

    def Mult(self, x, y):
        return _nonlinearform.NonlinearForm_Mult(self, x, y)

    def GetGradient(self, x):
        return _nonlinearform.NonlinearForm_GetGradient(self, x)
    __swig_destroy__ = _nonlinearform.delete_NonlinearForm
    __del__ = lambda self: None

    def GetGradientMatrix(self, x):
        return _nonlinearform.NonlinearForm_GetGradientMatrix(self, x)
NonlinearForm_swigregister = _nonlinearform.NonlinearForm_swigregister
NonlinearForm_swigregister(NonlinearForm)

# This file is compatible with both classic and new-style classes.


