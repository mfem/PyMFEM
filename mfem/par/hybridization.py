# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hybridization')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hybridization')
    _hybridization = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hybridization', [dirname(__file__)])
        except ImportError:
            import _hybridization
            return _hybridization
        try:
            _mod = imp.load_module('_hybridization', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hybridization = swig_import_helper()
    del swig_import_helper
else:
    import _hybridization
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import handle
import operators
import vector
import array
import ostream_typemap
import hypre
import sparsemat
import matrix
import densemat
import fespace
import coefficient
import intrules
import eltrans
import fe
import mesh
import ncmesh
import element
import geom
import table
import vertex
import gridfunc
import bilininteg
import fe_coll
import lininteg
import linearform
import pfespace
import pmesh
import pncmesh
import communication
import sets
class Hybridization(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hybridization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hybridization, name)
    __repr__ = _swig_repr

    def __init__(self, fespace, c_fespace):
        this = _hybridization.new_Hybridization(fespace, c_fespace)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hybridization.delete_Hybridization
    __del__ = lambda self: None

    def SetConstraintIntegrator(self, c_integ):
        return _hybridization.Hybridization_SetConstraintIntegrator(self, c_integ)

    def Init(self, ess_tdof_list):
        return _hybridization.Hybridization_Init(self, ess_tdof_list)

    def AssembleMatrix(self, el, A):
        return _hybridization.Hybridization_AssembleMatrix(self, el, A)

    def AssembleBdrMatrix(self, bdr_el, A):
        return _hybridization.Hybridization_AssembleBdrMatrix(self, bdr_el, A)

    def Finalize(self):
        return _hybridization.Hybridization_Finalize(self)

    def GetMatrix(self):
        return _hybridization.Hybridization_GetMatrix(self)

    def GetParallelMatrix(self, *args):
        return _hybridization.Hybridization_GetParallelMatrix(self, *args)

    def SetOperatorType(self, tid):
        return _hybridization.Hybridization_SetOperatorType(self, tid)

    def ReduceRHS(self, b, b_r):
        return _hybridization.Hybridization_ReduceRHS(self, b, b_r)

    def ComputeSolution(self, b, sol_r, sol):
        return _hybridization.Hybridization_ComputeSolution(self, b, sol_r, sol)

    def Reset(self):
        return _hybridization.Hybridization_Reset(self)
Hybridization_swigregister = _hybridization.Hybridization_swigregister
Hybridization_swigregister(Hybridization)

# This file is compatible with both classic and new-style classes.


