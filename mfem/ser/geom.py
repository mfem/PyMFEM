# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_geom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_geom')
    _geom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geom', [dirname(__file__)])
        except ImportError:
            import _geom
            return _geom
        try:
            _mod = imp.load_module('_geom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _geom = swig_import_helper()
    del swig_import_helper
else:
    import _geom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import intrules
import array
import ostream_typemap
import densemat
import vector
import operators
import matrix
class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    POINT = _geom.Geometry_POINT
    SEGMENT = _geom.Geometry_SEGMENT
    TRIANGLE = _geom.Geometry_TRIANGLE
    SQUARE = _geom.Geometry_SQUARE
    TETRAHEDRON = _geom.Geometry_TETRAHEDRON
    CUBE = _geom.Geometry_CUBE
    NumGeom = _geom.Geometry_NumGeom
    __swig_setmethods__["Name"] = _geom.Geometry_Name_set
    __swig_getmethods__["Name"] = _geom.Geometry_Name_get
    if _newclass:
        Name = _swig_property(_geom.Geometry_Name_get, _geom.Geometry_Name_set)

    def __init__(self):
        this = _geom.new_Geometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _geom.delete_Geometry
    __del__ = lambda self: None

    def GetVertices(self, GeomType):
        return _geom.Geometry_GetVertices(self, GeomType)

    def GetCenter(self, GeomType):
        return _geom.Geometry_GetCenter(self, GeomType)
    if _newclass:
        GetRandomPoint = staticmethod(_geom.Geometry_GetRandomPoint)
    else:
        GetRandomPoint = _geom.Geometry_GetRandomPoint
    if _newclass:
        CheckPoint = staticmethod(_geom.Geometry_CheckPoint)
    else:
        CheckPoint = _geom.Geometry_CheckPoint
    if _newclass:
        ProjectPoint = staticmethod(_geom.Geometry_ProjectPoint)
    else:
        ProjectPoint = _geom.Geometry_ProjectPoint

    def GetGeomToPerfGeomJac(self, GeomType):
        return _geom.Geometry_GetGeomToPerfGeomJac(self, GeomType)

    def GetPerfGeomToGeomJac(self, GeomType):
        return _geom.Geometry_GetPerfGeomToGeomJac(self, GeomType)

    def GetPerfPointMat(self, GeomType, pm):
        return _geom.Geometry_GetPerfPointMat(self, GeomType, pm)

    def JacToPerfJac(self, GeomType, J, PJ):
        return _geom.Geometry_JacToPerfJac(self, GeomType, J, PJ)

    def NumBdr(self, GeomType):
        return _geom.Geometry_NumBdr(self, GeomType)
Geometry_swigregister = _geom.Geometry_swigregister
Geometry_swigregister(Geometry)
cvar = _geom.cvar
Geometry.NumBdrArray = _geom.cvar.Geometry_NumBdrArray
Geometry.Volume = _geom.cvar.Geometry_Volume
Geometry.Dimension = _geom.cvar.Geometry_Dimension
Geometry.NumVerts = _geom.cvar.Geometry_NumVerts
Geometry.NumEdges = _geom.cvar.Geometry_NumEdges
Geometry.NumFaces = _geom.cvar.Geometry_NumFaces

def Geometry_GetRandomPoint(GeomType, ip):
    return _geom.Geometry_GetRandomPoint(GeomType, ip)
Geometry_GetRandomPoint = _geom.Geometry_GetRandomPoint

def Geometry_CheckPoint(*args):
    return _geom.Geometry_CheckPoint(*args)
Geometry_CheckPoint = _geom.Geometry_CheckPoint

def Geometry_ProjectPoint(*args):
    return _geom.Geometry_ProjectPoint(*args)
Geometry_ProjectPoint = _geom.Geometry_ProjectPoint

class RefinedGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedGeometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Times"] = _geom.RefinedGeometry_Times_set
    __swig_getmethods__["Times"] = _geom.RefinedGeometry_Times_get
    if _newclass:
        Times = _swig_property(_geom.RefinedGeometry_Times_get, _geom.RefinedGeometry_Times_set)
    __swig_setmethods__["ETimes"] = _geom.RefinedGeometry_ETimes_set
    __swig_getmethods__["ETimes"] = _geom.RefinedGeometry_ETimes_get
    if _newclass:
        ETimes = _swig_property(_geom.RefinedGeometry_ETimes_get, _geom.RefinedGeometry_ETimes_set)
    __swig_getmethods__["RefPts"] = _geom.RefinedGeometry_RefPts_get
    if _newclass:
        RefPts = _swig_property(_geom.RefinedGeometry_RefPts_get)
    __swig_getmethods__["RefGeoms"] = _geom.RefinedGeometry_RefGeoms_get
    if _newclass:
        RefGeoms = _swig_property(_geom.RefinedGeometry_RefGeoms_get)
    __swig_getmethods__["RefEdges"] = _geom.RefinedGeometry_RefEdges_get
    if _newclass:
        RefEdges = _swig_property(_geom.RefinedGeometry_RefEdges_get)
    __swig_setmethods__["NumBdrEdges"] = _geom.RefinedGeometry_NumBdrEdges_set
    __swig_getmethods__["NumBdrEdges"] = _geom.RefinedGeometry_NumBdrEdges_get
    if _newclass:
        NumBdrEdges = _swig_property(_geom.RefinedGeometry_NumBdrEdges_get, _geom.RefinedGeometry_NumBdrEdges_set)
    __swig_setmethods__["Type"] = _geom.RefinedGeometry_Type_set
    __swig_getmethods__["Type"] = _geom.RefinedGeometry_Type_get
    if _newclass:
        Type = _swig_property(_geom.RefinedGeometry_Type_get, _geom.RefinedGeometry_Type_set)

    def __init__(self, NPts, NRefG, NRefE, NBdrE=0):
        this = _geom.new_RefinedGeometry(NPts, NRefG, NRefE, NBdrE)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _geom.delete_RefinedGeometry
    __del__ = lambda self: None
RefinedGeometry_swigregister = _geom.RefinedGeometry_swigregister
RefinedGeometry_swigregister(RefinedGeometry)

class GeometryRefiner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryRefiner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryRefiner, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _geom.new_GeometryRefiner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetType(self, t):
        return _geom.GeometryRefiner_SetType(self, t)

    def GetType(self):
        return _geom.GeometryRefiner_GetType(self)

    def Refine(self, Geom, Times, ETimes=1):
        return _geom.GeometryRefiner_Refine(self, Geom, Times, ETimes)

    def RefineInterior(self, Geom, Times):
        return _geom.GeometryRefiner_RefineInterior(self, Geom, Times)
    __swig_destroy__ = _geom.delete_GeometryRefiner
    __del__ = lambda self: None
GeometryRefiner_swigregister = _geom.GeometryRefiner_swigregister
GeometryRefiner_swigregister(GeometryRefiner)

# This file is compatible with both classic and new-style classes.

GlobGeometryRefiner = cvar.GlobGeometryRefiner

