# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_estimators')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_estimators')
    _estimators = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_estimators', [dirname(__file__)])
        except ImportError:
            import _estimators
            return _estimators
        try:
            _mod = imp.load_module('_estimators', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _estimators = swig_import_helper()
    del swig_import_helper
else:
    import _estimators
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import array
import ostream_typemap
import vector
import fespace
import coefficient
import matrix
import operators
import intrules
import sparsemat
import densemat
import eltrans
import fe
import mesh
import ncmesh
import gridfunc
import bilininteg
import fe_coll
import lininteg
import linearform
import element
import geom
import table
import vertex
import bilinearform
class AbstractErrorEstimator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractErrorEstimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractErrorEstimator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _estimators.delete_AbstractErrorEstimator
    __del__ = lambda self: None

    def __init__(self):
        this = _estimators.new_AbstractErrorEstimator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AbstractErrorEstimator_swigregister = _estimators.AbstractErrorEstimator_swigregister
AbstractErrorEstimator_swigregister(AbstractErrorEstimator)

class ErrorEstimator(AbstractErrorEstimator):
    __swig_setmethods__ = {}
    for _s in [AbstractErrorEstimator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorEstimator, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractErrorEstimator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorEstimator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetLocalErrors(self):
        return _estimators.ErrorEstimator_GetLocalErrors(self)

    def Reset(self):
        return _estimators.ErrorEstimator_Reset(self)
    __swig_destroy__ = _estimators.delete_ErrorEstimator
    __del__ = lambda self: None
ErrorEstimator_swigregister = _estimators.ErrorEstimator_swigregister
ErrorEstimator_swigregister(ErrorEstimator)

class AnisotropicErrorEstimator(ErrorEstimator):
    __swig_setmethods__ = {}
    for _s in [ErrorEstimator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnisotropicErrorEstimator, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorEstimator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnisotropicErrorEstimator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetAnisotropicFlags(self):
        return _estimators.AnisotropicErrorEstimator_GetAnisotropicFlags(self)
    __swig_destroy__ = _estimators.delete_AnisotropicErrorEstimator
    __del__ = lambda self: None
AnisotropicErrorEstimator_swigregister = _estimators.AnisotropicErrorEstimator_swigregister
AnisotropicErrorEstimator_swigregister(AnisotropicErrorEstimator)

class ZienkiewiczZhuEstimator(AnisotropicErrorEstimator):
    __swig_setmethods__ = {}
    for _s in [AnisotropicErrorEstimator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZienkiewiczZhuEstimator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnisotropicErrorEstimator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZienkiewiczZhuEstimator, name)
    __repr__ = _swig_repr

    def SetAnisotropic(self, aniso=True):
        return _estimators.ZienkiewiczZhuEstimator_SetAnisotropic(self, aniso)

    def GetTotalError(self):
        return _estimators.ZienkiewiczZhuEstimator_GetTotalError(self)

    def GetLocalErrors(self):
        return _estimators.ZienkiewiczZhuEstimator_GetLocalErrors(self)

    def GetAnisotropicFlags(self):
        return _estimators.ZienkiewiczZhuEstimator_GetAnisotropicFlags(self)

    def Reset(self):
        return _estimators.ZienkiewiczZhuEstimator_Reset(self)
    __swig_destroy__ = _estimators.delete_ZienkiewiczZhuEstimator
    __del__ = lambda self: None

    def __init__(self, integ, sol, flux_fes, own_flux_fes=False):

        if own_flux_fes: flux_fes.thisown=0


        this = _estimators.new_ZienkiewiczZhuEstimator(integ, sol, flux_fes, own_flux_fes)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ZienkiewiczZhuEstimator_swigregister = _estimators.ZienkiewiczZhuEstimator_swigregister
ZienkiewiczZhuEstimator_swigregister(ZienkiewiczZhuEstimator)

# This file is compatible with both classic and new-style classes.


