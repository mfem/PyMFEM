# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fe')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fe')
    _fe = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fe', [dirname(__file__)])
        except ImportError:
            import _fe
            return _fe
        try:
            _mod = imp.load_module('_fe', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fe = swig_import_helper()
    del swig_import_helper
else:
    import _fe
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import array
import ostream_typemap
import vector
import intrules
import densemat
import operators
import matrix
import sparsemat
class FunctionSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionSpace, name)
    __repr__ = _swig_repr
    Pk = _fe.FunctionSpace_Pk
    Qk = _fe.FunctionSpace_Qk
    rQk = _fe.FunctionSpace_rQk

    def __init__(self):
        this = _fe.new_FunctionSpace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_FunctionSpace
    __del__ = lambda self: None
FunctionSpace_swigregister = _fe.FunctionSpace_swigregister
FunctionSpace_swigregister(FunctionSpace)

class FiniteElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SCALAR = _fe.FiniteElement_SCALAR
    VECTOR = _fe.FiniteElement_VECTOR
    VALUE = _fe.FiniteElement_VALUE
    INTEGRAL = _fe.FiniteElement_INTEGRAL
    H_DIV = _fe.FiniteElement_H_DIV
    H_CURL = _fe.FiniteElement_H_CURL
    NONE = _fe.FiniteElement_NONE
    GRAD = _fe.FiniteElement_GRAD
    DIV = _fe.FiniteElement_DIV
    CURL = _fe.FiniteElement_CURL

    def GetDim(self):
        return _fe.FiniteElement_GetDim(self)

    def GetGeomType(self):
        return _fe.FiniteElement_GetGeomType(self)

    def GetDof(self):
        return _fe.FiniteElement_GetDof(self)

    def GetOrder(self):
        return _fe.FiniteElement_GetOrder(self)

    def Space(self):
        return _fe.FiniteElement_Space(self)

    def GetRangeType(self):
        return _fe.FiniteElement_GetRangeType(self)

    def GetDerivRangeType(self):
        return _fe.FiniteElement_GetDerivRangeType(self)

    def GetMapType(self):
        return _fe.FiniteElement_GetMapType(self)

    def GetDerivType(self):
        return _fe.FiniteElement_GetDerivType(self)

    def GetDerivMapType(self):
        return _fe.FiniteElement_GetDerivMapType(self)

    def CalcShape(self, ip, shape):
        return _fe.FiniteElement_CalcShape(self, ip, shape)

    def CalcPhysShape(self, Trans, shape):
        return _fe.FiniteElement_CalcPhysShape(self, Trans, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.FiniteElement_CalcDShape(self, ip, dshape)

    def CalcPhysDShape(self, Trans, dshape):
        return _fe.FiniteElement_CalcPhysDShape(self, Trans, dshape)

    def GetNodes(self):
        return _fe.FiniteElement_GetNodes(self)

    def CalcVShape(self, *args):
        return _fe.FiniteElement_CalcVShape(self, *args)

    def CalcPhysVShape(self, Trans, shape):
        return _fe.FiniteElement_CalcPhysVShape(self, Trans, shape)

    def CalcDivShape(self, ip, divshape):
        return _fe.FiniteElement_CalcDivShape(self, ip, divshape)

    def CalcPhysDivShape(self, Trans, divshape):
        return _fe.FiniteElement_CalcPhysDivShape(self, Trans, divshape)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.FiniteElement_CalcCurlShape(self, ip, curl_shape)

    def CalcPhysCurlShape(self, Trans, curl_shape):
        return _fe.FiniteElement_CalcPhysCurlShape(self, Trans, curl_shape)

    def GetFaceDofs(self, face, dofs, ndofs):
        return _fe.FiniteElement_GetFaceDofs(self, face, dofs, ndofs)

    def CalcHessian(self, ip, h):
        return _fe.FiniteElement_CalcHessian(self, ip, h)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.FiniteElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.FiniteElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def ProjectDelta(self, vertex, dofs):
        return _fe.FiniteElement_ProjectDelta(self, vertex, dofs)

    def Project(self, *args):
        return _fe.FiniteElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.FiniteElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.FiniteElement_ProjectCurl(self, fe, Trans, curl)

    def ProjectDiv(self, fe, Trans, div):
        return _fe.FiniteElement_ProjectDiv(self, fe, Trans, div)
    __swig_destroy__ = _fe.delete_FiniteElement
    __del__ = lambda self: None
    if _newclass:
        VerifyClosed = staticmethod(_fe.FiniteElement_VerifyClosed)
    else:
        VerifyClosed = _fe.FiniteElement_VerifyClosed
    if _newclass:
        VerifyOpen = staticmethod(_fe.FiniteElement_VerifyOpen)
    else:
        VerifyOpen = _fe.FiniteElement_VerifyOpen
FiniteElement_swigregister = _fe.FiniteElement_swigregister
FiniteElement_swigregister(FiniteElement)

def FiniteElement_VerifyClosed(pt_type):
    return _fe.FiniteElement_VerifyClosed(pt_type)
FiniteElement_VerifyClosed = _fe.FiniteElement_VerifyClosed

def FiniteElement_VerifyOpen(pt_type):
    return _fe.FiniteElement_VerifyOpen(pt_type)
FiniteElement_VerifyOpen = _fe.FiniteElement_VerifyOpen

class ScalarFiniteElement(FiniteElement):
    __swig_setmethods__ = {}
    for _s in [FiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetMapType(self, M):
        return _fe.ScalarFiniteElement_SetMapType(self, M)
    __swig_destroy__ = _fe.delete_ScalarFiniteElement
    __del__ = lambda self: None
ScalarFiniteElement_swigregister = _fe.ScalarFiniteElement_swigregister
ScalarFiniteElement_swigregister(ScalarFiniteElement)

class NodalFiniteElement(ScalarFiniteElement):
    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetLocalInterpolation(self, Trans, I):
        return _fe.NodalFiniteElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.NodalFiniteElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.NodalFiniteElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.NodalFiniteElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectDiv(self, fe, Trans, div):
        return _fe.NodalFiniteElement_ProjectDiv(self, fe, Trans, div)
    __swig_destroy__ = _fe.delete_NodalFiniteElement
    __del__ = lambda self: None
NodalFiniteElement_swigregister = _fe.NodalFiniteElement_swigregister
NodalFiniteElement_swigregister(NodalFiniteElement)

class PositiveFiniteElement(ScalarFiniteElement):
    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositiveFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositiveFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetLocalInterpolation(self, Trans, I):
        return _fe.PositiveFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.PositiveFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_PositiveFiniteElement
    __del__ = lambda self: None
PositiveFiniteElement_swigregister = _fe.PositiveFiniteElement_swigregister
PositiveFiniteElement_swigregister(PositiveFiniteElement)

class VectorFiniteElement(FiniteElement):
    __swig_setmethods__ = {}
    for _s in [FiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_VectorFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_VectorFiniteElement
    __del__ = lambda self: None
VectorFiniteElement_swigregister = _fe.VectorFiniteElement_swigregister
VectorFiniteElement_swigregister(VectorFiniteElement)

class PointFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_PointFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.PointFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.PointFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_PointFiniteElement
    __del__ = lambda self: None
PointFiniteElement_swigregister = _fe.PointFiniteElement_swigregister
PointFiniteElement_swigregister(PointFiniteElement)

class Linear1DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Linear1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Linear1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Linear1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Linear1DFiniteElement
    __del__ = lambda self: None
Linear1DFiniteElement_swigregister = _fe.Linear1DFiniteElement_swigregister
Linear1DFiniteElement_swigregister(Linear1DFiniteElement)

class Linear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Linear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Linear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Linear2DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.Linear2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_Linear2DFiniteElement
    __del__ = lambda self: None
Linear2DFiniteElement_swigregister = _fe.Linear2DFiniteElement_swigregister
Linear2DFiniteElement_swigregister(Linear2DFiniteElement)

class BiLinear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_BiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.BiLinear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.BiLinear2DFiniteElement_CalcDShape(self, ip, dshape)

    def CalcHessian(self, ip, h):
        return _fe.BiLinear2DFiniteElement_CalcHessian(self, ip, h)

    def ProjectDelta(self, vertex, dofs):
        return _fe.BiLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_BiLinear2DFiniteElement
    __del__ = lambda self: None
BiLinear2DFiniteElement_swigregister = _fe.BiLinear2DFiniteElement_swigregister
BiLinear2DFiniteElement_swigregister(BiLinear2DFiniteElement)

class GaussLinear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_GaussLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.GaussLinear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.GaussLinear2DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.GaussLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_GaussLinear2DFiniteElement
    __del__ = lambda self: None
GaussLinear2DFiniteElement_swigregister = _fe.GaussLinear2DFiniteElement_swigregister
GaussLinear2DFiniteElement_swigregister(GaussLinear2DFiniteElement)

class GaussBiLinear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussBiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussBiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_GaussBiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.GaussBiLinear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.GaussBiLinear2DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.GaussBiLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_GaussBiLinear2DFiniteElement
    __del__ = lambda self: None
GaussBiLinear2DFiniteElement_swigregister = _fe.GaussBiLinear2DFiniteElement_swigregister
GaussBiLinear2DFiniteElement_swigregister(GaussBiLinear2DFiniteElement)

class P1OnQuadFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1OnQuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1OnQuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P1OnQuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P1OnQuadFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P1OnQuadFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.P1OnQuadFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_P1OnQuadFiniteElement
    __del__ = lambda self: None
P1OnQuadFiniteElement_swigregister = _fe.P1OnQuadFiniteElement_swigregister
P1OnQuadFiniteElement_swigregister(P1OnQuadFiniteElement)

class Quad1DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Quad1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Quad1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Quad1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Quad1DFiniteElement
    __del__ = lambda self: None
Quad1DFiniteElement_swigregister = _fe.Quad1DFiniteElement_swigregister
Quad1DFiniteElement_swigregister(Quad1DFiniteElement)

class QuadPos1DFiniteElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPos1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPos1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_QuadPos1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.QuadPos1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.QuadPos1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_QuadPos1DFiniteElement
    __del__ = lambda self: None
QuadPos1DFiniteElement_swigregister = _fe.QuadPos1DFiniteElement_swigregister
QuadPos1DFiniteElement_swigregister(QuadPos1DFiniteElement)

class Quad2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Quad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Quad2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Quad2DFiniteElement_CalcDShape(self, ip, dshape)

    def CalcHessian(self, ip, h):
        return _fe.Quad2DFiniteElement_CalcHessian(self, ip, h)

    def ProjectDelta(self, vertex, dofs):
        return _fe.Quad2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_Quad2DFiniteElement
    __del__ = lambda self: None
Quad2DFiniteElement_swigregister = _fe.Quad2DFiniteElement_swigregister
Quad2DFiniteElement_swigregister(Quad2DFiniteElement)

class GaussQuad2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_GaussQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.GaussQuad2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.GaussQuad2DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_GaussQuad2DFiniteElement
    __del__ = lambda self: None
GaussQuad2DFiniteElement_swigregister = _fe.GaussQuad2DFiniteElement_swigregister
GaussQuad2DFiniteElement_swigregister(GaussQuad2DFiniteElement)

class BiQuad2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_BiQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.BiQuad2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.BiQuad2DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.BiQuad2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_BiQuad2DFiniteElement
    __del__ = lambda self: None
BiQuad2DFiniteElement_swigregister = _fe.BiQuad2DFiniteElement_swigregister
BiQuad2DFiniteElement_swigregister(BiQuad2DFiniteElement)

class BiQuadPos2DFiniteElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiQuadPos2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiQuadPos2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_BiQuadPos2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.BiQuadPos2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.BiQuadPos2DFiniteElement_CalcDShape(self, ip, dshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.BiQuadPos2DFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.BiQuadPos2DFiniteElement_Project(self, *args)

    def ProjectDelta(self, vertex, dofs):
        return _fe.BiQuadPos2DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_BiQuadPos2DFiniteElement
    __del__ = lambda self: None
BiQuadPos2DFiniteElement_swigregister = _fe.BiQuadPos2DFiniteElement_swigregister
BiQuadPos2DFiniteElement_swigregister(BiQuadPos2DFiniteElement)

class GaussBiQuad2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussBiQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussBiQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_GaussBiQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.GaussBiQuad2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.GaussBiQuad2DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_GaussBiQuad2DFiniteElement
    __del__ = lambda self: None
GaussBiQuad2DFiniteElement_swigregister = _fe.GaussBiQuad2DFiniteElement_swigregister
GaussBiQuad2DFiniteElement_swigregister(GaussBiQuad2DFiniteElement)

class BiCubic2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCubic2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCubic2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_BiCubic2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.BiCubic2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.BiCubic2DFiniteElement_CalcDShape(self, ip, dshape)

    def CalcHessian(self, ip, h):
        return _fe.BiCubic2DFiniteElement_CalcHessian(self, ip, h)
    __swig_destroy__ = _fe.delete_BiCubic2DFiniteElement
    __del__ = lambda self: None
BiCubic2DFiniteElement_swigregister = _fe.BiCubic2DFiniteElement_swigregister
BiCubic2DFiniteElement_swigregister(BiCubic2DFiniteElement)

class Cubic1DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Cubic1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Cubic1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Cubic1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Cubic1DFiniteElement
    __del__ = lambda self: None
Cubic1DFiniteElement_swigregister = _fe.Cubic1DFiniteElement_swigregister
Cubic1DFiniteElement_swigregister(Cubic1DFiniteElement)

class Cubic2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Cubic2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Cubic2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Cubic2DFiniteElement_CalcDShape(self, ip, dshape)

    def CalcHessian(self, ip, h):
        return _fe.Cubic2DFiniteElement_CalcHessian(self, ip, h)
    __swig_destroy__ = _fe.delete_Cubic2DFiniteElement
    __del__ = lambda self: None
Cubic2DFiniteElement_swigregister = _fe.Cubic2DFiniteElement_swigregister
Cubic2DFiniteElement_swigregister(Cubic2DFiniteElement)

class Cubic3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Cubic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Cubic3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Cubic3DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Cubic3DFiniteElement
    __del__ = lambda self: None
Cubic3DFiniteElement_swigregister = _fe.Cubic3DFiniteElement_swigregister
Cubic3DFiniteElement_swigregister(Cubic3DFiniteElement)

class P0TriangleFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P0TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P0TriangleFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P0TriangleFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.P0TriangleFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_P0TriangleFiniteElement
    __del__ = lambda self: None
P0TriangleFiniteElement_swigregister = _fe.P0TriangleFiniteElement_swigregister
P0TriangleFiniteElement_swigregister(P0TriangleFiniteElement)

class P0QuadFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P0QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P0QuadFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P0QuadFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.P0QuadFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_P0QuadFiniteElement
    __del__ = lambda self: None
P0QuadFiniteElement_swigregister = _fe.P0QuadFiniteElement_swigregister
P0QuadFiniteElement_swigregister(P0QuadFiniteElement)

class Linear3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Linear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Linear3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Linear3DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.Linear3DFiniteElement_ProjectDelta(self, vertex, dofs)

    def GetFaceDofs(self, face, dofs, ndofs):
        return _fe.Linear3DFiniteElement_GetFaceDofs(self, face, dofs, ndofs)
    __swig_destroy__ = _fe.delete_Linear3DFiniteElement
    __del__ = lambda self: None
Linear3DFiniteElement_swigregister = _fe.Linear3DFiniteElement_swigregister
Linear3DFiniteElement_swigregister(Linear3DFiniteElement)

class Quadratic3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quadratic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quadratic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Quadratic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Quadratic3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Quadratic3DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Quadratic3DFiniteElement
    __del__ = lambda self: None
Quadratic3DFiniteElement_swigregister = _fe.Quadratic3DFiniteElement_swigregister
Quadratic3DFiniteElement_swigregister(Quadratic3DFiniteElement)

class TriLinear3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_TriLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.TriLinear3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.TriLinear3DFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.TriLinear3DFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_TriLinear3DFiniteElement
    __del__ = lambda self: None
TriLinear3DFiniteElement_swigregister = _fe.TriLinear3DFiniteElement_swigregister
TriLinear3DFiniteElement_swigregister(TriLinear3DFiniteElement)

class CrouzeixRaviartFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_CrouzeixRaviartFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.CrouzeixRaviartFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.CrouzeixRaviartFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.CrouzeixRaviartFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_CrouzeixRaviartFiniteElement
    __del__ = lambda self: None
CrouzeixRaviartFiniteElement_swigregister = _fe.CrouzeixRaviartFiniteElement_swigregister
CrouzeixRaviartFiniteElement_swigregister(CrouzeixRaviartFiniteElement)

class CrouzeixRaviartQuadFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartQuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartQuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_CrouzeixRaviartQuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.CrouzeixRaviartQuadFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.CrouzeixRaviartQuadFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_CrouzeixRaviartQuadFiniteElement
    __del__ = lambda self: None
CrouzeixRaviartQuadFiniteElement_swigregister = _fe.CrouzeixRaviartQuadFiniteElement_swigregister
CrouzeixRaviartQuadFiniteElement_swigregister(CrouzeixRaviartQuadFiniteElement)

class P0SegmentFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, Ord=0):
        this = _fe.new_P0SegmentFiniteElement(Ord)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P0SegmentFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P0SegmentFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_P0SegmentFiniteElement
    __del__ = lambda self: None
P0SegmentFiniteElement_swigregister = _fe.P0SegmentFiniteElement_swigregister
P0SegmentFiniteElement_swigregister(P0SegmentFiniteElement)

class RT0TriangleFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT0TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT0TriangleFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT0TriangleFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT0TriangleFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT0TriangleFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT0TriangleFiniteElement
    __del__ = lambda self: None
RT0TriangleFiniteElement_swigregister = _fe.RT0TriangleFiniteElement_swigregister
RT0TriangleFiniteElement_swigregister(RT0TriangleFiniteElement)

class RT0QuadFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT0QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT0QuadFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT0QuadFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT0QuadFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT0QuadFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT0QuadFiniteElement
    __del__ = lambda self: None
RT0QuadFiniteElement_swigregister = _fe.RT0QuadFiniteElement_swigregister
RT0QuadFiniteElement_swigregister(RT0QuadFiniteElement)

class RT1TriangleFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT1TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT1TriangleFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT1TriangleFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT1TriangleFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT1TriangleFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT1TriangleFiniteElement
    __del__ = lambda self: None
RT1TriangleFiniteElement_swigregister = _fe.RT1TriangleFiniteElement_swigregister
RT1TriangleFiniteElement_swigregister(RT1TriangleFiniteElement)

class RT1QuadFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT1QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT1QuadFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT1QuadFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT1QuadFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT1QuadFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT1QuadFiniteElement
    __del__ = lambda self: None
RT1QuadFiniteElement_swigregister = _fe.RT1QuadFiniteElement_swigregister
RT1QuadFiniteElement_swigregister(RT1QuadFiniteElement)

class RT2TriangleFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT2TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT2TriangleFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT2TriangleFiniteElement_CalcDivShape(self, ip, divshape)
    __swig_destroy__ = _fe.delete_RT2TriangleFiniteElement
    __del__ = lambda self: None
RT2TriangleFiniteElement_swigregister = _fe.RT2TriangleFiniteElement_swigregister
RT2TriangleFiniteElement_swigregister(RT2TriangleFiniteElement)

class RT2QuadFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT2QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT2QuadFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT2QuadFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT2QuadFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT2QuadFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT2QuadFiniteElement
    __del__ = lambda self: None
RT2QuadFiniteElement_swigregister = _fe.RT2QuadFiniteElement_swigregister
RT2QuadFiniteElement_swigregister(RT2QuadFiniteElement)

class P1SegmentFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P1SegmentFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P1SegmentFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P1SegmentFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_P1SegmentFiniteElement
    __del__ = lambda self: None
P1SegmentFiniteElement_swigregister = _fe.P1SegmentFiniteElement_swigregister
P1SegmentFiniteElement_swigregister(P1SegmentFiniteElement)

class P2SegmentFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P2SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P2SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P2SegmentFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P2SegmentFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P2SegmentFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_P2SegmentFiniteElement
    __del__ = lambda self: None
P2SegmentFiniteElement_swigregister = _fe.P2SegmentFiniteElement_swigregister
P2SegmentFiniteElement_swigregister(P2SegmentFiniteElement)

class Lagrange1DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lagrange1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lagrange1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, degree):
        this = _fe.new_Lagrange1DFiniteElement(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.Lagrange1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.Lagrange1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_Lagrange1DFiniteElement
    __del__ = lambda self: None
Lagrange1DFiniteElement_swigregister = _fe.Lagrange1DFiniteElement_swigregister
Lagrange1DFiniteElement_swigregister(Lagrange1DFiniteElement)

class P1TetNonConfFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1TetNonConfFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1TetNonConfFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P1TetNonConfFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P1TetNonConfFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P1TetNonConfFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_P1TetNonConfFiniteElement
    __del__ = lambda self: None
P1TetNonConfFiniteElement_swigregister = _fe.P1TetNonConfFiniteElement_swigregister
P1TetNonConfFiniteElement_swigregister(P1TetNonConfFiniteElement)

class P0TetFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P0TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P0TetFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P0TetFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.P0TetFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_P0TetFiniteElement
    __del__ = lambda self: None
P0TetFiniteElement_swigregister = _fe.P0TetFiniteElement_swigregister
P0TetFiniteElement_swigregister(P0TetFiniteElement)

class P0HexFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_P0HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.P0HexFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.P0HexFiniteElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.P0HexFiniteElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_P0HexFiniteElement
    __del__ = lambda self: None
P0HexFiniteElement_swigregister = _fe.P0HexFiniteElement_swigregister
P0HexFiniteElement_swigregister(P0HexFiniteElement)

class LagrangeHexFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LagrangeHexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LagrangeHexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, degree):
        this = _fe.new_LagrangeHexFiniteElement(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.LagrangeHexFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.LagrangeHexFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_LagrangeHexFiniteElement
    __del__ = lambda self: None
LagrangeHexFiniteElement_swigregister = _fe.LagrangeHexFiniteElement_swigregister
LagrangeHexFiniteElement_swigregister(LagrangeHexFiniteElement)

class RefinedLinear1DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RefinedLinear1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RefinedLinear1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RefinedLinear1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RefinedLinear1DFiniteElement
    __del__ = lambda self: None
RefinedLinear1DFiniteElement_swigregister = _fe.RefinedLinear1DFiniteElement_swigregister
RefinedLinear1DFiniteElement_swigregister(RefinedLinear1DFiniteElement)

class RefinedLinear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RefinedLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RefinedLinear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RefinedLinear2DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RefinedLinear2DFiniteElement
    __del__ = lambda self: None
RefinedLinear2DFiniteElement_swigregister = _fe.RefinedLinear2DFiniteElement_swigregister
RefinedLinear2DFiniteElement_swigregister(RefinedLinear2DFiniteElement)

class RefinedLinear3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RefinedLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RefinedLinear3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RefinedLinear3DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RefinedLinear3DFiniteElement
    __del__ = lambda self: None
RefinedLinear3DFiniteElement_swigregister = _fe.RefinedLinear3DFiniteElement_swigregister
RefinedLinear3DFiniteElement_swigregister(RefinedLinear3DFiniteElement)

class RefinedBiLinear2DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedBiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedBiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RefinedBiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RefinedBiLinear2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RefinedBiLinear2DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RefinedBiLinear2DFiniteElement
    __del__ = lambda self: None
RefinedBiLinear2DFiniteElement_swigregister = _fe.RefinedBiLinear2DFiniteElement_swigregister
RefinedBiLinear2DFiniteElement_swigregister(RefinedBiLinear2DFiniteElement)

class RefinedTriLinear3DFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedTriLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedTriLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RefinedTriLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RefinedTriLinear3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RefinedTriLinear3DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RefinedTriLinear3DFiniteElement
    __del__ = lambda self: None
RefinedTriLinear3DFiniteElement_swigregister = _fe.RefinedTriLinear3DFiniteElement_swigregister
RefinedTriLinear3DFiniteElement_swigregister(RefinedTriLinear3DFiniteElement)

class Nedelec1HexFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nedelec1HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nedelec1HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Nedelec1HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.Nedelec1HexFiniteElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.Nedelec1HexFiniteElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.Nedelec1HexFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.Nedelec1HexFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_Nedelec1HexFiniteElement
    __del__ = lambda self: None
Nedelec1HexFiniteElement_swigregister = _fe.Nedelec1HexFiniteElement_swigregister
Nedelec1HexFiniteElement_swigregister(Nedelec1HexFiniteElement)

class Nedelec1TetFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nedelec1TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nedelec1TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Nedelec1TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.Nedelec1TetFiniteElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.Nedelec1TetFiniteElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.Nedelec1TetFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.Nedelec1TetFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_Nedelec1TetFiniteElement
    __del__ = lambda self: None
Nedelec1TetFiniteElement_swigregister = _fe.Nedelec1TetFiniteElement_swigregister
Nedelec1TetFiniteElement_swigregister(Nedelec1TetFiniteElement)

class RT0HexFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT0HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT0HexFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT0HexFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT0HexFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT0HexFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT0HexFiniteElement
    __del__ = lambda self: None
RT0HexFiniteElement_swigregister = _fe.RT0HexFiniteElement_swigregister
RT0HexFiniteElement_swigregister(RT0HexFiniteElement)

class RT1HexFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT1HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT1HexFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT1HexFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT1HexFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT1HexFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT1HexFiniteElement
    __del__ = lambda self: None
RT1HexFiniteElement_swigregister = _fe.RT1HexFiniteElement_swigregister
RT1HexFiniteElement_swigregister(RT1HexFiniteElement)

class RT0TetFiniteElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RT0TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT0TetFiniteElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT0TetFiniteElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT0TetFiniteElement_GetLocalInterpolation(self, Trans, I)

    def Project(self, *args):
        return _fe.RT0TetFiniteElement_Project(self, *args)
    __swig_destroy__ = _fe.delete_RT0TetFiniteElement
    __del__ = lambda self: None
RT0TetFiniteElement_swigregister = _fe.RT0TetFiniteElement_swigregister
RT0TetFiniteElement_swigregister(RT0TetFiniteElement)

class RotTriLinearHexFiniteElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotTriLinearHexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotTriLinearHexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_RotTriLinearHexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.RotTriLinearHexFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.RotTriLinearHexFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_RotTriLinearHexFiniteElement
    __del__ = lambda self: None
RotTriLinearHexFiniteElement_swigregister = _fe.RotTriLinearHexFiniteElement_swigregister
RotTriLinearHexFiniteElement_swigregister(RotTriLinearHexFiniteElement)

class Poly_1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly_1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poly_1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fe.new_Poly_1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Binom = staticmethod(_fe.Poly_1D_Binom)
    else:
        Binom = _fe.Poly_1D_Binom

    def GetPoints(self, p, type):
        return _fe.Poly_1D_GetPoints(self, p, type)

    def OpenPoints(self, *args):
        return _fe.Poly_1D_OpenPoints(self, *args)

    def ClosedPoints(self, *args):
        return _fe.Poly_1D_ClosedPoints(self, *args)

    def GetBasis(self, p, type):
        return _fe.Poly_1D_GetBasis(self, p, type)

    def OpenBasis(self, *args):
        return _fe.Poly_1D_OpenBasis(self, *args)

    def ClosedBasis(self, *args):
        return _fe.Poly_1D_ClosedBasis(self, *args)
    if _newclass:
        CalcBasis = staticmethod(_fe.Poly_1D_CalcBasis)
    else:
        CalcBasis = _fe.Poly_1D_CalcBasis
    if _newclass:
        CalcDelta = staticmethod(_fe.Poly_1D_CalcDelta)
    else:
        CalcDelta = _fe.Poly_1D_CalcDelta
    if _newclass:
        ChebyshevPoints = staticmethod(_fe.Poly_1D_ChebyshevPoints)
    else:
        ChebyshevPoints = _fe.Poly_1D_ChebyshevPoints
    if _newclass:
        CalcBinomTerms = staticmethod(_fe.Poly_1D_CalcBinomTerms)
    else:
        CalcBinomTerms = _fe.Poly_1D_CalcBinomTerms
    if _newclass:
        CalcDBinomTerms = staticmethod(_fe.Poly_1D_CalcDBinomTerms)
    else:
        CalcDBinomTerms = _fe.Poly_1D_CalcDBinomTerms
    if _newclass:
        CalcBernstein = staticmethod(_fe.Poly_1D_CalcBernstein)
    else:
        CalcBernstein = _fe.Poly_1D_CalcBernstein
    __swig_destroy__ = _fe.delete_Poly_1D
    __del__ = lambda self: None
Poly_1D_swigregister = _fe.Poly_1D_swigregister
Poly_1D_swigregister(Poly_1D)

def Poly_1D_Binom(p):
    return _fe.Poly_1D_Binom(p)
Poly_1D_Binom = _fe.Poly_1D_Binom

def Poly_1D_CalcBasis(*args):
    return _fe.Poly_1D_CalcBasis(*args)
Poly_1D_CalcBasis = _fe.Poly_1D_CalcBasis

def Poly_1D_CalcDelta(p, x):
    return _fe.Poly_1D_CalcDelta(p, x)
Poly_1D_CalcDelta = _fe.Poly_1D_CalcDelta

def Poly_1D_ChebyshevPoints(p, x):
    return _fe.Poly_1D_ChebyshevPoints(p, x)
Poly_1D_ChebyshevPoints = _fe.Poly_1D_ChebyshevPoints

def Poly_1D_CalcBinomTerms(*args):
    return _fe.Poly_1D_CalcBinomTerms(*args)
Poly_1D_CalcBinomTerms = _fe.Poly_1D_CalcBinomTerms

def Poly_1D_CalcDBinomTerms(p, x, y, d):
    return _fe.Poly_1D_CalcDBinomTerms(p, x, y, d)
Poly_1D_CalcDBinomTerms = _fe.Poly_1D_CalcDBinomTerms

def Poly_1D_CalcBernstein(*args):
    return _fe.Poly_1D_CalcBernstein(*args)
Poly_1D_CalcBernstein = _fe.Poly_1D_CalcBernstein

class H1_SegmentElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_H1_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1_SegmentElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1_SegmentElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1_SegmentElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1_SegmentElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1_SegmentElement
    __del__ = lambda self: None
H1_SegmentElement_swigregister = _fe.H1_SegmentElement_swigregister
H1_SegmentElement_swigregister(H1_SegmentElement)

class H1_QuadrilateralElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_H1_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1_QuadrilateralElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1_QuadrilateralElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1_QuadrilateralElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1_QuadrilateralElement
    __del__ = lambda self: None
H1_QuadrilateralElement_swigregister = _fe.H1_QuadrilateralElement_swigregister
H1_QuadrilateralElement_swigregister(H1_QuadrilateralElement)

class H1_HexahedronElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_H1_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1_HexahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1_HexahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1_HexahedronElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1_HexahedronElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1_HexahedronElement
    __del__ = lambda self: None
H1_HexahedronElement_swigregister = _fe.H1_HexahedronElement_swigregister
H1_HexahedronElement_swigregister(H1_HexahedronElement)

class H1Pos_SegmentElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_H1Pos_SegmentElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1Pos_SegmentElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1Pos_SegmentElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1Pos_SegmentElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1Pos_SegmentElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1Pos_SegmentElement
    __del__ = lambda self: None
H1Pos_SegmentElement_swigregister = _fe.H1Pos_SegmentElement_swigregister
H1Pos_SegmentElement_swigregister(H1Pos_SegmentElement)

class H1Pos_QuadrilateralElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_H1Pos_QuadrilateralElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1Pos_QuadrilateralElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1Pos_QuadrilateralElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1Pos_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1Pos_QuadrilateralElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1Pos_QuadrilateralElement
    __del__ = lambda self: None
H1Pos_QuadrilateralElement_swigregister = _fe.H1Pos_QuadrilateralElement_swigregister
H1Pos_QuadrilateralElement_swigregister(H1Pos_QuadrilateralElement)

class H1Pos_HexahedronElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_H1Pos_HexahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1Pos_HexahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1Pos_HexahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.H1Pos_HexahedronElement_ProjectDelta(self, vertex, dofs)

    def GetDofMap(self):
        return _fe.H1Pos_HexahedronElement_GetDofMap(self)
    __swig_destroy__ = _fe.delete_H1Pos_HexahedronElement
    __del__ = lambda self: None
H1Pos_HexahedronElement_swigregister = _fe.H1Pos_HexahedronElement_swigregister
H1Pos_HexahedronElement_swigregister(H1Pos_HexahedronElement)

class H1_TriangleElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_H1_TriangleElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1_TriangleElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1_TriangleElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_H1_TriangleElement
    __del__ = lambda self: None
H1_TriangleElement_swigregister = _fe.H1_TriangleElement_swigregister
H1_TriangleElement_swigregister(H1_TriangleElement)

class H1_TetrahedronElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_H1_TetrahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.H1_TetrahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.H1_TetrahedronElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_H1_TetrahedronElement
    __del__ = lambda self: None
H1_TetrahedronElement_swigregister = _fe.H1_TetrahedronElement_swigregister
H1_TetrahedronElement_swigregister(H1_TetrahedronElement)

class H1Pos_TriangleElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_H1Pos_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, *args):
        return _fe.H1Pos_TriangleElement_CalcShape(self, *args)

    def CalcDShape(self, *args):
        return _fe.H1Pos_TriangleElement_CalcDShape(self, *args)
    __swig_destroy__ = _fe.delete_H1Pos_TriangleElement
    __del__ = lambda self: None
H1Pos_TriangleElement_swigregister = _fe.H1Pos_TriangleElement_swigregister
H1Pos_TriangleElement_swigregister(H1Pos_TriangleElement)

class H1Pos_TetrahedronElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_H1Pos_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, *args):
        return _fe.H1Pos_TetrahedronElement_CalcShape(self, *args)

    def CalcDShape(self, *args):
        return _fe.H1Pos_TetrahedronElement_CalcDShape(self, *args)
    __swig_destroy__ = _fe.delete_H1Pos_TetrahedronElement
    __del__ = lambda self: None
H1Pos_TetrahedronElement_swigregister = _fe.H1Pos_TetrahedronElement_swigregister
H1Pos_TetrahedronElement_swigregister(H1Pos_TetrahedronElement)

class L2_SegmentElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_L2_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2_SegmentElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2_SegmentElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2_SegmentElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2_SegmentElement
    __del__ = lambda self: None
L2_SegmentElement_swigregister = _fe.L2_SegmentElement_swigregister
L2_SegmentElement_swigregister(L2_SegmentElement)

class L2Pos_SegmentElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_L2Pos_SegmentElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2Pos_SegmentElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2Pos_SegmentElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2Pos_SegmentElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2Pos_SegmentElement
    __del__ = lambda self: None
L2Pos_SegmentElement_swigregister = _fe.L2Pos_SegmentElement_swigregister
L2Pos_SegmentElement_swigregister(L2Pos_SegmentElement)

class L2_QuadrilateralElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_L2_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2_QuadrilateralElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2_QuadrilateralElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.L2_QuadrilateralElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_L2_QuadrilateralElement
    __del__ = lambda self: None
L2_QuadrilateralElement_swigregister = _fe.L2_QuadrilateralElement_swigregister
L2_QuadrilateralElement_swigregister(L2_QuadrilateralElement)

class L2Pos_QuadrilateralElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_L2Pos_QuadrilateralElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2Pos_QuadrilateralElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2Pos_QuadrilateralElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2Pos_QuadrilateralElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2Pos_QuadrilateralElement
    __del__ = lambda self: None
L2Pos_QuadrilateralElement_swigregister = _fe.L2Pos_QuadrilateralElement_swigregister
L2Pos_QuadrilateralElement_swigregister(L2Pos_QuadrilateralElement)

class L2_HexahedronElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_L2_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2_HexahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2_HexahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2_HexahedronElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2_HexahedronElement
    __del__ = lambda self: None
L2_HexahedronElement_swigregister = _fe.L2_HexahedronElement_swigregister
L2_HexahedronElement_swigregister(L2_HexahedronElement)

class L2Pos_HexahedronElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_L2Pos_HexahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2Pos_HexahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2Pos_HexahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2Pos_HexahedronElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2Pos_HexahedronElement
    __del__ = lambda self: None
L2Pos_HexahedronElement_swigregister = _fe.L2Pos_HexahedronElement_swigregister
L2Pos_HexahedronElement_swigregister(L2Pos_HexahedronElement)

class L2_TriangleElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_L2_TriangleElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2_TriangleElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2_TriangleElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2_TriangleElement_ProjectDelta(self, vertex, dofs)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.L2_TriangleElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_L2_TriangleElement
    __del__ = lambda self: None
L2_TriangleElement_swigregister = _fe.L2_TriangleElement_swigregister
L2_TriangleElement_swigregister(L2_TriangleElement)

class L2Pos_TriangleElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_L2Pos_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2Pos_TriangleElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2Pos_TriangleElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2Pos_TriangleElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2Pos_TriangleElement
    __del__ = lambda self: None
L2Pos_TriangleElement_swigregister = _fe.L2Pos_TriangleElement_swigregister
L2Pos_TriangleElement_swigregister(L2Pos_TriangleElement)

class L2_TetrahedronElement(NodalFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_L2_TetrahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2_TetrahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2_TetrahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2_TetrahedronElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2_TetrahedronElement
    __del__ = lambda self: None
L2_TetrahedronElement_swigregister = _fe.L2_TetrahedronElement_swigregister
L2_TetrahedronElement_swigregister(L2_TetrahedronElement)

class L2Pos_TetrahedronElement(PositiveFiniteElement):
    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_L2Pos_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.L2Pos_TetrahedronElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.L2Pos_TetrahedronElement_CalcDShape(self, ip, dshape)

    def ProjectDelta(self, vertex, dofs):
        return _fe.L2Pos_TetrahedronElement_ProjectDelta(self, vertex, dofs)
    __swig_destroy__ = _fe.delete_L2Pos_TetrahedronElement
    __del__ = lambda self: None
L2Pos_TetrahedronElement_swigregister = _fe.L2Pos_TetrahedronElement_swigregister
L2Pos_TetrahedronElement_swigregister(L2Pos_TetrahedronElement)

class RT_QuadrilateralElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_RT_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT_QuadrilateralElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT_QuadrilateralElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT_QuadrilateralElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.RT_QuadrilateralElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.RT_QuadrilateralElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.RT_QuadrilateralElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.RT_QuadrilateralElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_RT_QuadrilateralElement
    __del__ = lambda self: None
RT_QuadrilateralElement_swigregister = _fe.RT_QuadrilateralElement_swigregister
RT_QuadrilateralElement_swigregister(RT_QuadrilateralElement)

class RT_HexahedronElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_RT_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT_HexahedronElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT_HexahedronElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT_HexahedronElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.RT_HexahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.RT_HexahedronElement_Project(self, *args)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.RT_HexahedronElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_RT_HexahedronElement
    __del__ = lambda self: None
RT_HexahedronElement_swigregister = _fe.RT_HexahedronElement_swigregister
RT_HexahedronElement_swigregister(RT_HexahedronElement)

class RT_TriangleElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_RT_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT_TriangleElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT_TriangleElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT_TriangleElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.RT_TriangleElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.RT_TriangleElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.RT_TriangleElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.RT_TriangleElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_RT_TriangleElement
    __del__ = lambda self: None
RT_TriangleElement_swigregister = _fe.RT_TriangleElement_swigregister
RT_TriangleElement_swigregister(RT_TriangleElement)

class RT_TetrahedronElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_RT_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.RT_TetrahedronElement_CalcVShape(self, *args)

    def CalcDivShape(self, ip, divshape):
        return _fe.RT_TetrahedronElement_CalcDivShape(self, ip, divshape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.RT_TetrahedronElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.RT_TetrahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.RT_TetrahedronElement_Project(self, *args)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.RT_TetrahedronElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_RT_TetrahedronElement
    __del__ = lambda self: None
RT_TetrahedronElement_swigregister = _fe.RT_TetrahedronElement_swigregister
RT_TetrahedronElement_swigregister(RT_TetrahedronElement)

class ND_HexahedronElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_ND_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.ND_HexahedronElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.ND_HexahedronElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.ND_HexahedronElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.ND_HexahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.ND_HexahedronElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.ND_HexahedronElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.ND_HexahedronElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_ND_HexahedronElement
    __del__ = lambda self: None
ND_HexahedronElement_swigregister = _fe.ND_HexahedronElement_swigregister
ND_HexahedronElement_swigregister(ND_HexahedronElement)

class ND_QuadrilateralElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_ND_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.ND_QuadrilateralElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.ND_QuadrilateralElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.ND_QuadrilateralElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.ND_QuadrilateralElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.ND_QuadrilateralElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.ND_QuadrilateralElement_ProjectGrad(self, fe, Trans, grad)
    __swig_destroy__ = _fe.delete_ND_QuadrilateralElement
    __del__ = lambda self: None
ND_QuadrilateralElement_swigregister = _fe.ND_QuadrilateralElement_swigregister
ND_QuadrilateralElement_swigregister(ND_QuadrilateralElement)

class ND_TetrahedronElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_ND_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.ND_TetrahedronElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.ND_TetrahedronElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.ND_TetrahedronElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.ND_TetrahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.ND_TetrahedronElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.ND_TetrahedronElement_ProjectGrad(self, fe, Trans, grad)

    def ProjectCurl(self, fe, Trans, curl):
        return _fe.ND_TetrahedronElement_ProjectCurl(self, fe, Trans, curl)
    __swig_destroy__ = _fe.delete_ND_TetrahedronElement
    __del__ = lambda self: None
ND_TetrahedronElement_swigregister = _fe.ND_TetrahedronElement_swigregister
ND_TetrahedronElement_swigregister(ND_TetrahedronElement)

class ND_TriangleElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_ND_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        return _fe.ND_TriangleElement_CalcVShape(self, *args)

    def CalcCurlShape(self, ip, curl_shape):
        return _fe.ND_TriangleElement_CalcCurlShape(self, ip, curl_shape)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.ND_TriangleElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.ND_TriangleElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.ND_TriangleElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.ND_TriangleElement_ProjectGrad(self, fe, Trans, grad)
    __swig_destroy__ = _fe.delete_ND_TriangleElement
    __del__ = lambda self: None
ND_TriangleElement_swigregister = _fe.ND_TriangleElement_swigregister
ND_TriangleElement_swigregister(ND_TriangleElement)

class ND_SegmentElement(VectorFiniteElement):
    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fe.new_ND_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.ND_SegmentElement_CalcShape(self, ip, shape)

    def CalcVShape(self, *args):
        return _fe.ND_SegmentElement_CalcVShape(self, *args)

    def GetLocalInterpolation(self, Trans, I):
        return _fe.ND_SegmentElement_GetLocalInterpolation(self, Trans, I)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        return _fe.ND_SegmentElement_ProjectMatrixCoefficient(self, mc, T, dofs)

    def Project(self, *args):
        return _fe.ND_SegmentElement_Project(self, *args)

    def ProjectGrad(self, fe, Trans, grad):
        return _fe.ND_SegmentElement_ProjectGrad(self, fe, Trans, grad)
    __swig_destroy__ = _fe.delete_ND_SegmentElement
    __del__ = lambda self: None
ND_SegmentElement_swigregister = _fe.ND_SegmentElement_swigregister
ND_SegmentElement_swigregister(ND_SegmentElement)

class NURBSFiniteElement(ScalarFiniteElement):
    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBSFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBSFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reset(self):
        return _fe.NURBSFiniteElement_Reset(self)

    def SetIJK(self, IJK):
        return _fe.NURBSFiniteElement_SetIJK(self, IJK)

    def GetPatch(self):
        return _fe.NURBSFiniteElement_GetPatch(self)

    def SetPatch(self, p):
        return _fe.NURBSFiniteElement_SetPatch(self, p)

    def GetElement(self):
        return _fe.NURBSFiniteElement_GetElement(self)

    def SetElement(self, e):
        return _fe.NURBSFiniteElement_SetElement(self, e)

    def KnotVectors(self):
        return _fe.NURBSFiniteElement_KnotVectors(self)

    def Weights(self):
        return _fe.NURBSFiniteElement_Weights(self)
    __swig_destroy__ = _fe.delete_NURBSFiniteElement
    __del__ = lambda self: None
NURBSFiniteElement_swigregister = _fe.NURBSFiniteElement_swigregister
NURBSFiniteElement_swigregister(NURBSFiniteElement)

class NURBS1DFiniteElement(NURBSFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_NURBS1DFiniteElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.NURBS1DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.NURBS1DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_NURBS1DFiniteElement
    __del__ = lambda self: None
NURBS1DFiniteElement_swigregister = _fe.NURBS1DFiniteElement_swigregister
NURBS1DFiniteElement_swigregister(NURBS1DFiniteElement)

class NURBS2DFiniteElement(NURBSFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_NURBS2DFiniteElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.NURBS2DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.NURBS2DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_NURBS2DFiniteElement
    __del__ = lambda self: None
NURBS2DFiniteElement_swigregister = _fe.NURBS2DFiniteElement_swigregister
NURBS2DFiniteElement_swigregister(NURBS2DFiniteElement)

class NURBS3DFiniteElement(NURBSFiniteElement):
    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _fe.new_NURBS3DFiniteElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        return _fe.NURBS3DFiniteElement_CalcShape(self, ip, shape)

    def CalcDShape(self, ip, dshape):
        return _fe.NURBS3DFiniteElement_CalcDShape(self, ip, dshape)
    __swig_destroy__ = _fe.delete_NURBS3DFiniteElement
    __del__ = lambda self: None
NURBS3DFiniteElement_swigregister = _fe.NURBS3DFiniteElement_swigregister
NURBS3DFiniteElement_swigregister(NURBS3DFiniteElement)

# This file is compatible with both classic and new-style classes.


