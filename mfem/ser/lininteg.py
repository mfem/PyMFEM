# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lininteg')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lininteg')
    _lininteg = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lininteg', [dirname(__file__)])
        except ImportError:
            import _lininteg
            return _lininteg
        try:
            _mod = imp.load_module('_lininteg', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lininteg = swig_import_helper()
    del swig_import_helper
else:
    import _lininteg
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import fe
import array
import ostream_typemap
import vector
import intrules
import densemat
import operators
import matrix
import sparsemat
import eltrans
import coefficient
class LinearFormIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFormIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AssembleRHSElementVect(self, *args):
        return _lininteg.LinearFormIntegrator_AssembleRHSElementVect(self, *args)

    def SetIntRule(self, ir):
        return _lininteg.LinearFormIntegrator_SetIntRule(self, ir)

    def GetIntRule(self):
        return _lininteg.LinearFormIntegrator_GetIntRule(self)
    __swig_destroy__ = _lininteg.delete_LinearFormIntegrator
    __del__ = lambda self: None
LinearFormIntegrator_swigregister = _lininteg.LinearFormIntegrator_swigregister
LinearFormIntegrator_swigregister(LinearFormIntegrator)

class DeltaLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaLFIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def IsDelta(self):
        return _lininteg.DeltaLFIntegrator_IsDelta(self)

    def GetDeltaCenter(self, center):
        return _lininteg.DeltaLFIntegrator_GetDeltaCenter(self, center)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        return _lininteg.DeltaLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    __swig_destroy__ = _lininteg.delete_DeltaLFIntegrator
    __del__ = lambda self: None
DeltaLFIntegrator_swigregister = _lininteg.DeltaLFIntegrator_swigregister
DeltaLFIntegrator_swigregister(DeltaLFIntegrator)

class DomainLFIntegrator(DeltaLFIntegrator):
    __swig_setmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _lininteg.new_DomainLFIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = args[0]




    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        return _lininteg.DomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)

    def AssembleRHSElementVect(self, *args):
        return _lininteg.DomainLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_DomainLFIntegrator
    __del__ = lambda self: None
DomainLFIntegrator_swigregister = _lininteg.DomainLFIntegrator_swigregister
DomainLFIntegrator_swigregister(DomainLFIntegrator)

class BoundaryLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        this = _lininteg.new_BoundaryLFIntegrator(QG, a, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = QG




    def AssembleRHSElementVect(self, *args):
        return _lininteg.BoundaryLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_BoundaryLFIntegrator
    __del__ = lambda self: None
BoundaryLFIntegrator_swigregister = _lininteg.BoundaryLFIntegrator_swigregister
BoundaryLFIntegrator_swigregister(BoundaryLFIntegrator)

class BoundaryNormalLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryNormalLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryNormalLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        this = _lininteg.new_BoundaryNormalLFIntegrator(QG, a, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.BoundaryNormalLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_BoundaryNormalLFIntegrator
    __del__ = lambda self: None
BoundaryNormalLFIntegrator_swigregister = _lininteg.BoundaryNormalLFIntegrator_swigregister
BoundaryNormalLFIntegrator_swigregister(BoundaryNormalLFIntegrator)

class BoundaryTangentialLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryTangentialLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryTangentialLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        this = _lininteg.new_BoundaryTangentialLFIntegrator(QG, a, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.BoundaryTangentialLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_BoundaryTangentialLFIntegrator
    __del__ = lambda self: None
BoundaryTangentialLFIntegrator_swigregister = _lininteg.BoundaryTangentialLFIntegrator_swigregister
BoundaryTangentialLFIntegrator_swigregister(BoundaryTangentialLFIntegrator)

class VectorDomainLFIntegrator(DeltaLFIntegrator):
    __swig_setmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDomainLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDomainLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QF):
        this = _lininteg.new_VectorDomainLFIntegrator(QF)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        return _lininteg.VectorDomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)

    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorDomainLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorDomainLFIntegrator
    __del__ = lambda self: None
VectorDomainLFIntegrator_swigregister = _lininteg.VectorDomainLFIntegrator_swigregister
VectorDomainLFIntegrator_swigregister(VectorDomainLFIntegrator)

class VectorBoundaryLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBoundaryLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBoundaryLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QG):
        this = _lininteg.new_VectorBoundaryLFIntegrator(QG)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorBoundaryLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorBoundaryLFIntegrator
    __del__ = lambda self: None
VectorBoundaryLFIntegrator_swigregister = _lininteg.VectorBoundaryLFIntegrator_swigregister
VectorBoundaryLFIntegrator_swigregister(VectorBoundaryLFIntegrator)

class VectorFEDomainLFIntegrator(DeltaLFIntegrator):
    __swig_setmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEDomainLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [DeltaLFIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEDomainLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, F):
        this = _lininteg.new_VectorFEDomainLFIntegrator(F)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = F




    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        return _lininteg.VectorFEDomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)

    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorFEDomainLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorFEDomainLFIntegrator
    __del__ = lambda self: None
VectorFEDomainLFIntegrator_swigregister = _lininteg.VectorFEDomainLFIntegrator_swigregister
VectorFEDomainLFIntegrator_swigregister(VectorFEDomainLFIntegrator)

class VectorBoundaryFluxLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBoundaryFluxLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBoundaryFluxLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, f, s=1.0, ir=None):
        this = _lininteg.new_VectorBoundaryFluxLFIntegrator(f, s, ir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorBoundaryFluxLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorBoundaryFluxLFIntegrator
    __del__ = lambda self: None
VectorBoundaryFluxLFIntegrator_swigregister = _lininteg.VectorBoundaryFluxLFIntegrator_swigregister
VectorBoundaryFluxLFIntegrator_swigregister(VectorBoundaryFluxLFIntegrator)

class VectorFEBoundaryFluxLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEBoundaryFluxLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEBoundaryFluxLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _lininteg.new_VectorFEBoundaryFluxLFIntegrator(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorFEBoundaryFluxLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorFEBoundaryFluxLFIntegrator
    __del__ = lambda self: None
VectorFEBoundaryFluxLFIntegrator_swigregister = _lininteg.VectorFEBoundaryFluxLFIntegrator_swigregister
VectorFEBoundaryFluxLFIntegrator_swigregister(VectorFEBoundaryFluxLFIntegrator)

class VectorFEBoundaryTangentLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEBoundaryTangentLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEBoundaryTangentLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, QG):
        this = _lininteg.new_VectorFEBoundaryTangentLFIntegrator(QG)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = QG




    def AssembleRHSElementVect(self, *args):
        return _lininteg.VectorFEBoundaryTangentLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_VectorFEBoundaryTangentLFIntegrator
    __del__ = lambda self: None
VectorFEBoundaryTangentLFIntegrator_swigregister = _lininteg.VectorFEBoundaryTangentLFIntegrator_swigregister
VectorFEBoundaryTangentLFIntegrator_swigregister(VectorFEBoundaryTangentLFIntegrator)

class BoundaryFlowIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryFlowIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryFlowIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _f, _u, a, b):
        this = _lininteg.new_BoundaryFlowIntegrator(_f, _u, a, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.BoundaryFlowIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_BoundaryFlowIntegrator
    __del__ = lambda self: None
BoundaryFlowIntegrator_swigregister = _lininteg.BoundaryFlowIntegrator_swigregister
BoundaryFlowIntegrator_swigregister(BoundaryFlowIntegrator)

class DGDirichletLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGDirichletLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGDirichletLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _lininteg.new_DGDirichletLFIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.DGDirichletLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_DGDirichletLFIntegrator
    __del__ = lambda self: None
DGDirichletLFIntegrator_swigregister = _lininteg.DGDirichletLFIntegrator_swigregister
DGDirichletLFIntegrator_swigregister(DGDirichletLFIntegrator)

class DGElasticityDirichletLFIntegrator(LinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGElasticityDirichletLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGElasticityDirichletLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, uD_, lambda_, mu_, alpha_, kappa_):
        this = _lininteg.new_DGElasticityDirichletLFIntegrator(uD_, lambda_, mu_, alpha_, kappa_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleRHSElementVect(self, *args):
        return _lininteg.DGElasticityDirichletLFIntegrator_AssembleRHSElementVect(self, *args)
    __swig_destroy__ = _lininteg.delete_DGElasticityDirichletLFIntegrator
    __del__ = lambda self: None
DGElasticityDirichletLFIntegrator_swigregister = _lininteg.DGElasticityDirichletLFIntegrator_swigregister
DGElasticityDirichletLFIntegrator_swigregister(DGElasticityDirichletLFIntegrator)

# This file is compatible with both classic and new-style classes.


